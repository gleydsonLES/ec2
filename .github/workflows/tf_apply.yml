name: Apply EC2

on:
  push:
    branches:
      - main
    paths:
      - 'ec2/**'

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  plan-dev:
    name: 'Terraform APPLY [Criando vm EC2]'
    runs-on: ubuntu-latest
    outputs: 
      output1: ${{ steps.set_ip.outputs.IP }}
      output2: ${{ steps.set_ip.outputs.instance_id }}
      output3: ${{ steps.set_ip.outputs.instance_zone }}
      output4: ${{ steps.set_ip.outputs.instance_region }}
    env:
      TF_WORKING_DIR: 'ec2'

    defaults:
      run:
        shell: bash
        working-directory: ${{ env.TF_WORKING_DIR }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform fmt
        id: fmt
        run: terraform fmt 

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Apply
        run: terraform apply -auto-approve

      - name: Debug Terraform Outputs
        run: terraform output

      - name: Coletando informações da VM
        id: set_ip
        run: |
          PUBLIC_IP=$(terraform output -raw public_ip | grep -E -o "([0-9]{1,3}[\.]){3}[0-9]{1,3}")
          echo "::set-output name=IP::$PUBLIC_IP"

          INSTANCE_ID=$(terraform output -raw instance_id | grep -oE 'i-[a-zA-Z0-9]+')
          echo "::set-output name=instance_id::$INSTANCE_ID"

          ZONE=$(terraform output -raw instance_region | grep -oE '([a-z]{2}-[a-z]+-[0-9]+[a-z])')
          echo "::set-output name=instance_zone::$ZONE"

          REGION=$(terraform output -raw instance_region | grep -oE '([a-z]{2}-[a-z]+-[0-9]+[a-z])' | sed 's/.$//')
          echo "::set-output name=instance_region::$REGION"
       
  deploy-ansible:
    name: 'Instalação do NGINX via Ansible'
    needs: 
      - plan-dev
    runs-on: ubuntu-latest
    steps:
      - name: Instalação da awscli
        run: sudo apt install awscli

      - name: Gerando chave SSH
        run: ssh-keygen -t rsa -f /home/runner/.ssh/my_key -N ""

      - name: Configurando permissão para chave SSH
        run: chmod 400 /home/runner/.ssh/my_key

      - name: Adicionado StrictHostKeyChecking no SSH config
        run: echo "StrictHostKeyChecking no" >> ~/.ssh/config

      - name: Enviando chave public para VM [EC2]
        run: |
          aws ec2-instance-connect send-ssh-public-key --region ${{ needs.plan-dev.outputs.output4 }} --availability-zone ${{ needs.plan-dev.outputs.output3 }} --instance-id ${{ needs.plan-dev.outputs.output2 }} --instance-os-user ubuntu --ssh-public-key file://$HOME/.ssh/my_key.pub
      
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Instalando Ansible
        run: |
          sudo apt-get update
          sudo apt-get install -y ansible

      - name: Instalando NGINX via Ansible
        run: |
          ansible-playbook -i "${{ needs.plan-dev.outputs.output1 }}," --private-key /home/runner/.ssh/my_key -u ubuntu .github/workflows/ansible/playbook.yml -e "ANSIBLE_HOST_KEY_CHECKING=False" -e "ANSIBLE_LOCALHOST_WARNING=False" -e "ANSIBLE_INVENTORY_UNPARSED_WARNING=False"
